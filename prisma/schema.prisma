
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @default(autoincrement()) @id
  email String @unique
  password String
  name String
  phone_number String
  status Boolean @default(true)
  wallet Wallet?
  auction Auction[]
  room_activity Room[]
  transaction_history Transaction_History[]
  notifications Notification[]
}

model Wallet{
  id Int @default(autoincrement()) @id
  balance Float @default(0)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique 
}

enum Type{
  Credit
  Debit
}
model Transaction_History{
  id Int @default(autoincrement()) @id
  user_Id Int
  user User @relation(fields: [user_Id], references: [id])
  type Type
  amount Float
} 

model Notification{
  id Int @default(autoincrement()) @id
  user_Id Int
  user User @relation(fields: [user_Id], references: [id])
  message String
}

//Order_History
model Order_History{
  id Int @default(autoincrement()) @id
  Amount Float
  buyer_Id Int
  seller_Id Int
  itemid Int 
  item  Item @relation(fields: [itemid], references: [id])
  room Auction @relation(fields: [room_Id],references: [id])
  room_Id Int @unique
}

enum Status{
  Sold
  Unsold
  Bidding
  Onhold
}

//initial and final bid remove 

model Item{
  id Int @default(autoincrement()) @id
  name String
  owner_id Int @unique
  description String
  status Status @default(Unsold)
  business_history Order_History[]
  auction Auction[]
}

enum Room_Status{
  Live
  Completed
  Halt
  Not_Started
}

//final_Bidder user Relation with final bidder null
model Auction{
  id Int @default(autoincrement()) @id
  room Room[]
  room_status Room_Status @default(Not_Started)
  item Item @relation(fields: [item_id],references: [id])
  item_id Int
  initial_bid Float
  final_bid Float @default(0)
  findal_bidder_id Int
  creater_id Int
  Creater User @relation(fields: [creater_id],references: [id])
  start_time String //EPOCH
  business_histort Order_History?
}

//Refund and Pay in Instate Wallet
model Room{
  id Int @default(autoincrement()) @id
  auction_room_id Int
  user_id Int
  bid Float
  timestamp  DateTime @default(now())
  bidder User @relation(fields: [user_id],references: [id])
  room Auction @relation(fields: [auction_room_id],references: [id], onDelete: Cascade)
}

//Check JS has In memory Cache instead of MAP